##############################
######## Custom Types ########
##############################
# Allowed feature flag types. These types help the client and server correct
# serialize and deserialise a feature flag's value.
enum FeatureFlagType {
  BOOLEAN
  JSON
  STRING
  NUMBER
}

type User {
  # Unique identifier of the user
  id: ID!
  # The users's first name
  givenName: String
  # The users' last name
  familyName: String
  # The users' email address
  emailAddress: String
  # Timestamp with timezone of when this record was first created
  createdAt: String
  # Timestamp with timezone of when this record was last updated
  updatedAt: String
}

# Represents a feature flag
type FeatureFlag {
  # Unique identifier of the feature flag
  id: ID!
  # Name of the feature flag. Ex: 'CHECKOUT_FLOW'
  key: String
  # The value associated with this feature flag. Ex: 'one click'
  value: String
  # Feature flags may be booleans or multi variate. Type indicates what this
  # feature flag represents. Valid values are documented as enum.
  type: FeatureFlagType
  # Timestamp with timezone of when this record was first created
  createdAt: String
  # Timestamp with timezone of when this record was last updated
  updatedAt: String
}

type UserFeatureFlag {
  id: ID!
  value: String
  createdAt: String
  updatedAt: String
}

type TargetUsersOutput {
  userId: ID!
  featureFlag: UserFeatureFlag!
}

# Represents a targetted users' feature flags
type UserWithFeatureFlagsResponse {
  # This is the targetted user
  user: User!
  # This is the users' associated feature flags
  featureFlags: [FeatureFlag]!
}

type UpdateUserFeatureFlagOutput {
  userId: ID!
  featureFlagId: ID!
  value: String!
  updatedAt: String!
}

##############################
##### Input Definitions ######
##############################
input UserFeatureFlagInput {
  id: ID!
  value: String
}

input TargetUsersInput {
  userId: ID!
  featureFlags: [UserFeatureFlagInput!]!
}

input UpdateUserFeatureFlagInput {
  userId: ID!
  featureFlagId: ID!
  value: String!
}

##############################
#### Mutations / Queries #####
##############################
type Mutation {
  targetUsers(data: [TargetUsersInput]): [TargetUsersOutput!]!
  updateUserFeatureFlag(data: UpdateUserFeatureFlagInput!): UpdateUserFeatureFlagOutput!
}

type Query {
  usersWithFeatureFlags: [UserWithFeatureFlagsResponse]!
}
